Integração Banco de dados

Tipo de Driver	

JDBC - Java Database Connectivity
Middleware do java para banco de dados

1 - JDBC-ODBC Bridge - Faz a conexão por meio do ODBC.
2 - JDBC-Native API - Utiliza o cliente do banco de dados para a conexão.
3 - JDBC-Net - Acessa servidores de middleware via Sockets, em uma arquitetura de três camadas.
4 - Pure Java - Com a implementação completa em Java, não precisa de cliente instalado. Também chamado de Thin Driver.

funcionalidades básicas do JDBC segue quatro passos simples:

Instanciar a classe do driver de conexão;
Obter uma conexão (Connection) a partir da Connection String, usuário e senha;
Instanciar um executor de SQL (Statement);
Executar os comandos DML (linguagem de manipulação de dados).


// passo 1  driver Derby sendo gerada a partir de uma chamada para o método forName
Class.forName("org.apache.derby.jdbc.ClientDriver");  
    // passo 2
    Connection c1 = DriverManager.getConnection(
    "jdbc:derby://localhost:1527/escola",
    "escola", "escola");
    // passo 3   chamada ao método getConnection, da classe DriverManager, sendo fornecidos os valores para Connection String, usuário e senha.
    Statement st = c1.createStatement(); // executor de SQL
    // passo 4 , é gerado um executor de SQL de nome st, com a chamada para o método createStatement. 
    st.executeUpdate(   //realizamos a inserção de um registro, invocando o método executeUpdate, 
    "INSERT INTO ALUNO VALUES('E2018.5004','DENIS',2018)");
    st.close();
    c1.close();



ResultSet - com base na tabela criada anteriormente, efetuamos uma consulta aos dados inseridos:

Class.forName("org.apache.derby.jdbc.ClientDriver");
    Connection c1 = DriverManager.getConnection(
    "jdbc:derby://localhost:1527/loja",
    "loja", "loja");
    Statement st = c1.createStatement(); // executor de SQL
    ResultSet r1 = st.executeQuery("SELECT * FROM ALUNO"); //executar a consulta
    while(r1.next())
    System.out.println("Aluno: " + r1.getString("NOME")+ //pegue o campo "nome" do registro ocorrente
    " - " + r1.getInt("ENTRADA"));
    r1.close();
    st.close();
    c1.close();

//getString, para texto, e getInt, para valores numéricos inteiros.

SQL Parametrizado
Proteção contra SQL Injection
Reutilização de comandos 
Formatação de acordo com o tipo de banco de dados
Classe utilizada no JDBC: PreparedStatement 

PreparedStatement  ps =
    c1.PreparedStatement (
        "insert into produto values( ?, ?, ?)" );
    ps.setInt( 1,1002 );
    ps.setString( 2,"Morango");
    ps.setInt(3,530);
    ps.executeUpdate();

    ps.close(); c1.close();




Class.forName("org.apache.derby.jdbc.ClientDriver");
    Connection c1 = DriverManager.getConnection(
    "jdbc:derby://localhost:1527/loja",
    "loja", "loja");
    PreparedStatement ps = c1.prepareStatement(
    "DELETE FROM ALUNO WHERE ENTRADA = ?");
    ps.setInt(1,2018);
    ps.executeUpdate();
    ps.close();
    c1.close();

Cada parâmetro deve ser preenchido com a chamada ao método correto, de acordo com seu tipo, como setInt, para inteiro, e setString, para texto. Após o preenchimento, devemos executar o comando SQL, com a chamada para executeUpdate, no caso das instruções INSERT, UPDATE e DELETE, ou executeQuery, para a instrução SELECT.


classe DAO:

public abstract class GenericDAO<E,K> {
protected Connection getConnection() throws Exception{
Class.forName("org.apache.derby.jdbc.ClientDriver");
return DriverManager.getConnection(
"jdbc:derby://localhost:1527/escola",
"escola", "escola");
}
protected Statement getStatement() throws Exception{
return getConnection().createStatement();
}
protected void closeStatement(Statement st) throws Exception{
st.getConnection().close();
}
public abstract void incluir(E entidade);
public abstract void excluir(K chave);
public abstract void alterar(E entidade);
public abstract E obter(K chave);
public abstract List<E> obterTodos();
}

getStatement e closeStatement, com o objetivo de gerar executores de SQL e eliminá-los, efetuando também as conexões e desconexões nos momentos necessários. Outro método utilitário é o getConnection, utilizado apenas para encapsular o processo de conexão com o banco.

Em caso de banco de dados Oracle, com acesso local e instância padrão XE, mantendo o usuário e a senha definidos, modifique o corpo do método getConnection

Class.forName("oracle.jdbc.OracleDriver");
return DriverManager.getConnection(
jdbc:oracle:thin:@localhost:1521:XE",
"escola","escola");


 A partir da entidade Aluno e chave primária do tipo String, sendo o início de sua codificação:
 
public class AlunoDAO extends GenericDAO<Aluno, String>{
	@Override
	public List<Aluno> obterTodos() {
		List<Aluno> lista = new ArrayList<>();
		try {
			ResultSet r1 = getStatement().executeQuery(
						"SELECT * FROM ALUNO");
			while(r1.next())
				lista.add(new Aluno(r1.getString("MATRICULA"),
				r1.getString("NOME"),r1.getInt("ENTRADA")));
			closeStatement(r1.getStatement());
		}catch(Exception e){
		}    
		return lista;        
	}
	@Override
	public Aluno obter(String chave) {
		Aluno aluno = null;
		try {
			PreparedStatement ps = 
				getConnection().prepareStatement(
				"SELECT * FROM ALUNO WHERE MATRICULA = ?");
			ps.setString(1, chave);
			ResultSet r1 = ps.executeQuery();
			if (r1.next())
				aluno = new Aluno(r1.getString("MATRICULA"),
							r1.getString("NOME"),
							r1.getInt("ENTRADA"));
			closeStatement(ps);
		} catch (Exception e) {
		}
		return aluno;
	}
}


Com a consulta aos registros foi implementada, devemos acrescentar os métodos de manipulação de dados na classe AlunoDAO.

@Override
public void incluir(Aluno entidade) {
	try {
		PreparedStatement ps = getConnection().prepareStatement(
					"INSERT INTO ALUNO VALUES (?, ?, ?)");
		ps.setString(1, entidade.matricula);
		ps.setString(2, entidade.nome);
		ps.setInt(3, entidade.ano);
		ps.executeUpdate();
		closeStatement(ps);
	} catch (Exception e) { }
}
@Override
public void excluir(String chave) {
	try {
		PreparedStatement ps = getConnection().prepareStatement(
					"DELETE FROM ALUNO WHERE MATRICULA = ?");
		ps.setString(1, chave);
		ps.executeUpdate();
		closeStatement(ps);
	} catch (Exception e) { }
}
@Override
public void alterar(Aluno entidade) {
	try {
		PreparedStatement ps = getConnection().prepareStatement(
					"UPDATE ALUNO SET NOME = ?, ENTRADA = ? "+
					" WHERE MATRICULA = ?");
		ps.setString(1, entidade.nome);
		ps.setInt(2, entidade.ano);
		ps.setString(3, entidade.matricula);
		ps.executeUpdate();
		closeStatement(ps);
	} catch (Exception e) { }
}


 consulta e manipulação dos dados 

 AlunoDAO dao = new AlunoDAO();
dao.obterTodos().forEach(aluno -> {
System.out.println(aluno.nome);
});


ENTIDADE:
public class produto implements serializable {
    public int codigo;
    public String nome;
    public int quantidade;

    public produto() {}

    public produto ( int codigo, string nome, int quantidade) {
        this.codigo = codigo;
        this.nome = nome;
        this.quantidade = quantidade;
    }
}

Padrão DAO:

public class AlunoDAO extends GenericDAO <Aluno, String> {
    @Overrider 
    public List <Aluno> oberTodos () {
        List <Aluno> lista = new ArrayList <> ();
        try {
            ResultSet r1 = getStatement (). executeQuery("Select*from aluno");
            
            while(r1.next())
            lista.add new Aluno (r1.getString("MATRICULA),
                                r1.getString("NOME),
                                (r1.getString("ENTRADA)));
        closeStatement (r1.getStatement());
    } catch ( Exception e) {}
    return lista;
        }
    }

ava Persistence Architecture (JPA) JPA ENTITY

@Entity @Table (name = "ALUNO")
@namedQueries   ({@NamedQuery (name = "Aluno.findAll", 
                                query = "SELECT a FROM aluno a")})
public class Aluno implements Serializable {
    private static final long serialVersionUID = 1L;
    @Id
    @Basic (Optional = false)
    @Column (name = "MATRICULA")
    private string matricula;
    @Column (name = "NOME")
    private string nome;
    @Column ( name = "ENTRADA")
    private string entrada; 

    public Aluno() {
	}

	public Aluno(String matricula) {
		this.matricula = matricula;
	}
	// getters e setters para os atributos internos
}


Toda a configuração da conexão com banco é efetuada em um arquivo no formato XML com o nome persistence. No mesmo arquivo deve ser escolhido o driver de persistência.
  
<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.1" xmlns="" xmlns:xsi="" 
xsi:schemaLocation="">
	<persistence-unit name="ExemploJavaDB01PU" 
			transaction-type="RESOURCE_LOCAL">
	<provider>
		org.eclipse.persistence.jpa.PersistenceProvider
	</provider>
	<class>modelJPA.Aluno</class>
	<properties>
		<property name="javax.persistence.jdbc.url" 
				value="jdbc:derby://localhost:1527/escola"/>
		<property name="javax.persistence.jdbc.user" 
				value="escola"/>
		<property name="javax.persistence.jdbc.driver" 
				value="org.apache.derby.jdbc.ClientDriver"/>
		<property name="javax.persistence.jdbc.password" 
				value="escola"/>
	</properties>
	</persistence-unit>
</persistence>   

Com os elementos do projeto devidamente configurados, poderíamos utilizá-los para listar o nome dos alunos:

EntitymanagerFactory emf = 
        Persistence.CreateEntityManagerFactory("1ExemploJavaDB01PU");
    EntityManager em = emf.createEntityManager();
    Query query =
        em.createNamedQuery ("Aluno.findAll", Aluno.class);
    List<Aluno> lista = query.getResultList();
    Lista.forEach (aluno->{ System.out.pritln(aluno.getnome());
    });



	classe com o nome SistemaEscola, incluindo a definição da instância de AlunoDAO e os métodos para exibição de valores, tanto para um aluno quanto para o conjunto completo deles.  


	public class SistemaEscola {
		private final AlunoDAO dao = new AlunoDAO();
		private static final BufferedReader entrada =
						new BufferedReader(
						new InputStreamReader(System.in));
			
		private void exibir(Aluno aluno){
			System.out.println("Aluno: "+aluno.nome+
						"\nMatricula: "+aluno.matricula+
						"\tEntrada: "+aluno.ano+
						"\n==========================");
		}
			
		public void exibirTodos(){
			dao.obterTodos().forEach(aluno->exibir(aluno));
		}
	}

	instância estática de BufferedReader:
	
	public void inserirAluno() throws IOException{
		Aluno aluno = new Aluno();
		System.out.println("Nome:");
		aluno.nome = entrada.readLine();
		System.out.println("Matricula:");
		aluno.matricula = entrada.readLine();
		System.out.println("Entrada:");
		aluno.ano = Integer.parseInt(entrada.readLine());
		dao.incluir(aluno);
	}
		
	public void excluirAluno() throws IOException{
		System.out.println("Matricula:");
		String matricula = entrada.readLine();
		dao.excluir(matricula);
	}

	Para finalizar nosso sistema cadastral, precisamos adicionar à classe um método main.

	public static void main(String args[]) throws IOException{
		SistemaEscola sistema = new SistemaEscola();
		while(true){
		  System.out.println(
				 "1-Listar\t2-Inserir\t3-Excluir\t0-Sair");
		  int opcao = Integer.parseInt(entrada.readLine());
		  if(opcao==0)
			 break;
		  switch(opcao){
			 case 1:
			   sistema.exibirTodos();
			   break;
			 case 2:
			   sistema.inserirAluno();
			   break;
			 case 3:
			   sistema.excluirAluno();
			   break;
		  }
		}
	}

	métodos modificados:
	
	@Override
public void excluir(String chave) {
	Connection c1 = null;
	try {
		c1 = getConnection();
		c1.setAutoCommit(false);
		PreparedStatement ps = getConnection().prepareStatement(
						"DELETE FROM ALUNO WHERE MATRICULA = ?");
		ps.setString(1, chave);
		ps.executeUpdate();
		c1.commit();
		closeStatement(ps);
	} catch (Exception e) {

		if(c1!=null)
			try {
				c1.rollback();
				c1.close();
			} catch (SQLException e2){}
	}
}

transações no JPA :
 
public void incluir(Aluno aluno) {
	EntityManagerFactory emf = Persistence.
				 createEntityManagerFactory("ExemploJavaDB01PU");
	EntityManager em = emf.createEntityManager();
	em.getTransaction().begin();
	try {
	   em.persist(aluno);
	   em.getTransaction().commit();
	} catch (Exception e) {
	   em.getTransaction().rollback();
	} finally {
	   em.close();
	}
}

// O controle deve ser obtido com getTransaction, a partir do qual uma transação é iniciada com begin, 
// sendo confirmada com o uso de commit, ou cancelada com rollback.
//No fluxo de execução temos a obtenção do EntityManager, início da transação, inclusão no banco com o uso de persist 
//e confirmação com commit. Caso ocorra um erro, temos a reversão das operações da transação como rollback, 
//e independentemente do resultado temos a chamada para close, dentro de um bloco finally.

SQL - INSERT, UPDATE, DELETE
DAO - Incluir, Alterar, Excluir
JpaController - create, edit, destroy
EntityManager - persist, merge, remove





