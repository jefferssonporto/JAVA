This - Sempre que quiser modificar um atributo dentro da própria classe, coloque a palavra this na frente da linha que vai mexer nesse Atributo
Objeto - Coisa Material ou abstrata que pode ser percebida pelos sentidos e descrita por meio das suas características, comportamentos e estado atual. 
Classe = molde 
Atributos - Métodos - Estado
instanciar - c1 = nova caneta 
Classe - Define os atributos e métodos comuns que serão compartilhados por um objeto
Abstração - Priorizar os atributos que importam naquele momento e ignorar os outros, nesse momento.
Principios (COMERNADA):
Confiável - O isolamento entre as partes gera software seguro. Ao alterar uma parte, nenhuma outra é afetada.
Oportuno - Ao dividir tudo em partes, várias delas podem ser desenvolvidas em paralelo
Manutenível - Atualizar um software é mais fácil. Uma pequena modificação vai beneficiar todas as partes que usarem o objeto.
Extensível - O software não é um estático. Ele deve crescer para permanecer útil.
Reutilizável - Podemos usar objetos de um sistema que criamos em outro sistema futuro.
Natural - Mais fácil de entender. Você se preocupa mais na funcionalidade do que nos detalhes de implementação.

int - inteiro
lógico - booelan 
real - float
Overrider - Sobre posto

UML - Linguagem de Modelagem Unificada - Modificadores de Visibilidade - Indicam o nível de acesso aos componentes internos de uma classe
+ - Pública - classe atual e todas as outras classes
- Privado - somente a classe atual
# protegido - a classe atual e todas as suas subclasses
\n - quebra linha 

Getters - Métodos acessores - que dão acessos. 
ex: e = nova estante
    t = e.getTotDoc()

Setters - Métodos Modificadores - modificam coisas dentro do objeto. Normalmente precisa de um parametro. 
ex: e = nova estante 
    e.setTotDoc(doc)

Método Construct - Método Construtor - Faz a chamada do método automaticamente, sempre que for criado algum o metodo, automaticamente faz a chamada do constrtuct. Método que tem o mesmo nome da classe
Ex: Classe Caneta 
    método construtor 
    (: caractere, c: Caractere, p: Real)
    setModelo(m) 
    setcor(c)
    setPonta(p)
    tampar()
    FimMetodo
    FimClasse
    c1 = nova Caneta
    ("BIC", "Azul", 0.5)

3 Pilares EHP
    Encapsulamento, Herança, Poliformismo
    Encapsulamento - Tem o mesmo padrão, protege o código do usuário e o usuário do código.
    Herança - Permite basear uma nova classe na definição de uma outra classe previamente existente. (Faz uma nova classe baseada na primeira). A herança será aplicada para características e comportamentos.


MÃE/PROGENITORA/SUPERCLASSE - uma classe que dá origem a outras classes que vão herdar todas as suas características e comportamentos.
Classes filhas / Subclasses - Classes oriundas das suas superclasses.

Extends = Herança
Antes do extends é a filha, depois do extends é a mãe.

Conceitos :

Classe Abstrata - Definiu uma classe como abstrata, ela não pode gerar objetos. Não pode ser instaciada. Só pode servir como progenitora.

Método Abstrato - Declarado, mas não implementado na progenitora. Só pode ser colocado dentro de uma interface ou um método abstrato.
 
Classe Final - Não pode ser herdada por outra classe. Ela é Obrigatoriamente folha, não pode ter filhos.

Método Final - É aquele que não pode ser sobrescrito pelas suas sub-classes. Ele é Obrigatoriamente herdado.

Poliformismo: Permite que um mesmo nome representa vários comportamentos diferentes.
 Poli - muitas 
 Morfo - Formas

 Poliformismo de sobreposição: Mesma assinatura de classes diferentes.
 
 Poliformismo de Sobrecarga: Assinatura diferentes mesma classes.