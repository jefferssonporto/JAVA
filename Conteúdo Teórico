Definição de uma classe em Java.
class Aluno {
	//Atributo
	private String Nome; 		
	//Métodos
	public void inserirNome ( ) {
		Nome = System.in.toString ();
	}
	public String recuperarNome ( ) {
		return Nome;
	}
}

Os modificadores podem ser qualquer elemento do seguinte conjunto:
{ Annotation, public, protected, private, abstract, static, final, strictfp}

Annotation - Não é propriamente um elemento, mas sim uma definição. Sua semântica implementa o conceito de anotações em Java e pode ser substituída por uma anotação padrão ou criada pelo programador.
Public, Protected e Private - São os símbolos que veremos quando falarmos de encapsulamento; são modificadores de acesso.
Static - Este modificador afeta o ciclo de vida da instância da classe e só pode ser usado em classes membro.
abstract e final - Já os modificadores abstract e final relacionam-se com a hierarquia de classes. Todos esses modificadores serão vistos oportunamente.
strictfp - Por fim, esse é um modificador que torna a implementação de cálculos de ponto flutuando independentes da plataforma. Sem o uso desse modificador, as operações se tornam dependentes da plataforma sobre a qual a máquina virtual é executada.

Definição de classe com a presença de modificadores:
@Deprecated @SuppressWarnings ("deprecation") public abstract strictfp class Aluno extends Pai implements Idealizacao, Sonho {
    //Atributo
    private String Nome; 
        
    //Métodos (parcialmente mostrados)
    public void inserirNome ( ) {
        Nome = System.in.toString ();
    }
    public String recuperarNome ( ) {
        return Nome
    ...//outros métodos ocultados por simplicidade
    }
}

A criação de um objeto se dá em duas etapas:

Primeiramente, uma variável é declarada como sendo do tipo de alguma classe.

A seguir, o compilador é instruído a gerar um objeto a partir daquela classe, que será rotulado com o identificador que nomeia a variável.
EX: Aluno objetoAluno = new Aluno ( )
ou 
Aluno objetoAluno; //declaração
objetoAluno = new Aluno ( ); //instanciação 

[Aluno objetoAluno] - Declaração de Variável 
[=] -  Inicialização de Variável
[new] Instrução de instanciação de objeto
[Aluno ( )] - Chamado ao construtor da classe;

O processo de criação do objeto começa com a alocação do espaço em memória.
E prossegue com a execução do código de construção do objeto.
Esse código, obrigatoriamente, deve ser implementado num método especial chamado construtor.
O método construtor é sempre executado quando da instanciação de um objeto e obrigatoriamente deve ter nome idêntico ao da classe.
 
Instanciação de objeto com "new".
//Importações
import java.util.Random;
	
	//Classe
	public class Aluno {
	//Atributos    
	private String nome;
	private int idade;
	private double codigo_identificador;
	private Random aleatorio;
	
	//Métodos
	public void Aluno ( String nome , int idade ) {
		aleatorio = new Random ();
		this.nome = nome;
		this.idade = idade;
		this.codigo_identificador = aleatorio.nextDouble ();
	}
	public void definirNome ( String nome ) {
		this.nome = nome;
	}  
	public void definirIdade ( int idade ) {
		this.idade = idade;
	}
}

Método “finalize ( ) - Este, quando implementado por uma classe, é invocado no momento em que a JVM for reciclar o objeto. Todavia, o método “finalize ( )” é solicitado quando o objeto estiver para ser reciclado, e não quando ele sair do escopo.

Associação - A Associação é semanticamente a mais fraca e se refere a objetos que consomem – usam – serviços ou funcionalidades de outros. Ela pode ocorrer mesmo quando nenhuma classe possui a outra e cada objeto instanciado tem sua existência independente do outro. Essa relação pode ocorrer com cardinalidade 1-1, 1-n, n-1 e n-n.
Agregação - Outro tipo de relacionamento entre classes é a Agregação, que ocorre entre dois ou mais objetos, com cada um tendo seu próprio ciclo de vida, mas com um objeto (pai) contendo os demais (filhos). É importante compreender que, nesse caso, os objetos filhos podem sobreviver à destruição do objeto pai. Um exemplo de Agregação se dá entre escola e aluno: se uma escola deixar de existir, não implica que o mesmo irá ocorrer com os seus alunos.
Composição - A Composição difere sutilmente da Agregação, pois ocorre quando há uma relação de dependência entre o(s) filho(s) e o objeto pai. Ou seja, caso o pai deixe de existir, necessariamente o filho será destruído. Voltando ao exemplo anterior, temos uma composição entre a escola e os departamentos. A extinção da escola traz consigo a extinção dos departamentos.

class Escola {
	//Atributos
	private String nome, CNPJ;   
	private Endereco endereco;
	private Departamento departamentos [];
	private Aluno discentes [];
	private int nr_discentes , nr_departamentos;}
	
	//Métodos
		public Escola ( String nome , String CNPJ) {
			this.nome = nome;
			this.CNPJ = CNPJ;
			this.departamentos = new Departamento [10];
			this.discentes = new Aluno [1000];
			this.nr_departamentos = 0;
			this.nr_discentes = 0;
		}
		public void criarDepartamento ( String nomeDepartamento ) {
			if ( nr_departamentos <= 10 )
			{
				departamentos [ nr_departamentos ] = new Departamento ( nomeDepartamento );
				nr_departamentos++;    //No caso de “Departamento”, objetos dessa classe são instanciados.
			} else {
				System.out.println ( "Nao e possivel criar outro Departamento." );
		}
		public void matricularAluno ( Aluno novoAluno ) {
			discentes [ nr_discentes ] = novoAluno;
		}
}

Referenciando objetos.

public class Referencia {
	private Aluno a1 , a2;
	
	public Referencia ( ) {
		a1 = new Aluno ( "Carlos" , 20);   
		System.out.println("O nome do aluno a1 é " + a1.recuperarNome());
		System.out.println("O nome do aluno a2 é " + a2.recuperarNome());
		a2 = a1;
		a2.definirNome("Flávia");
		System.out.println("O nome do aluno a1 é " + a1.recuperarNome());
		manipulaAluno ( a1 );
		System.out.println("O nome do aluno a1 é " + a1.recuperarNome());
	}
	public void manipulaAluno ( Aluno aluno ) {
		aluno.definirNome("Márcia");
	}
}
Saída:
    O nome do aluno a1 é Carlos
    O nome do aluno a2 é Ana
    O nome do aluno a1 é Flávia
    O nome do aluno a1 é Márcia

    
Herança em classes:
    public class ProfessorComissionado extends Professor {	
        } //, podemos observar que a herança é declarada apenas para a classe ancestral imediata.

Herança em interfaces.
    public interface ProfessorComissionado extends Professor, Diretor {
    }

Níveis de acesso em Java: 
Default: Assumido quando nenhum modificador é usado. Define a visibilidade como restrita ao pacote.
Privado: Declarado pelo uso do modificador “private”. A visibilidade é restrita à classe.
Protegido: Declarado pelo uso do modificador “protected”. A visibilidade é restrita ao pacote e a todas as subclasses.
Público: Declarado pelo uso do modificador “public”. Não há restrição de visibilidade.


Tabela Níveis de acesso e escopo.

                                                            default             public            private                protected
  Subclasse do mesmo pacote                                    sim                sim               não                     sim
  Subclasse de pacote diferente                                não                sim               não                     sim
  Classe (não derivada) do mesmo pacote                        sim                sim               não                     sim
  Classe (não derivada) de pacote diferente                    não                sim               não                     não
                                          
As restrições impostas pelos modificadores de acessibilidade são afetadas pela herança da seguinte maneira:

  Métodos (e atributos) declarados públicos na superclasse devem ser públicos nas subclasses.
  Métodos (e atributos) declarados protegidos na superclasse devem ser protegidos ou públicos nas subclasses. Eles não podem ser privados.
  Métodos e atributos privados não são accessíveis às subclasses, e sua acessibilidade não é afetada pela herança.

  Os códigos que implementam as classes “Pessoa”, “Empregado”, “Aluno” e a classe principal do programa são mostrados respectivamente nos Código 8, Código 9, Código 10 e Código 11.

Código 8: Classe "Pessoa".
 
public class Pessoa {
	//Atributos
	private String nome;
	private int idade;
	private Calendar data_nascimento;
	private long CPF;
	private Endereco endereco;
	
	//Métodos
	public Pessoa ( String nome , Calendar data_nascimento, long CPF , Endereco endereco ) {
		this.nome = nome;
		this.data_nascimento = data_nascimento;
		this.CPF = CPF;
		this.endereco = endereco;
		atualizarIdade ();
	}
	protected void atualizarNome ( String nome ) {
		this.nome = nome;
	}
	protected String recuperarNome ( ) {
		return this.nome;
	}
	protected void atualizarIdade ( ) {
		this.idade = calcularIdade ();
	}
	protected int recuperarIdade ( ) {
		return this.idade;
	}
	protected void atualizarCPF ( long CPF ) {
		this.CPF = CPF;
	}
	protected long recuperarCPF ( ) {
		return this.CPF;
	}
	protected void atualizarEndereco ( Endereco endereco ) {
		this.endereco = endereco;
	}
	protected Endereco recuperarEndereco ( ) {
		return this.endereco;
	}
	private int calcularIdade ( ){
		int lapso;
		Calendar hoje = Calendar.getInstance();
		lapso = hoje.get(YEAR) - data_nascimento.get(YEAR);
		if ( ( data_nascimento.get(MONTH) > hoje.get(MONTH) ) || ( data_nascimento.get(MONTH) == hoje.get(MONTH) && data_nascimento.get(DATE) > hoje.get(DATE) ) )
			lapso--;
		return lapso;
	}
}

Código 9: Classe "Empregado".

public class Empregado extends Pessoa {
	//Atributos
	protected String matricula;
	private Calendar data_admissao , data_demissao;
				
	public Empregado(String nome, Calendar data_nascimento, long CPF, Endereco endereco) {
		super(nome, data_nascimento, CPF, endereco);
		this.matricula = gerarMatricula ();
		data_admissao = Calendar.getInstance();
	}
	public void demitirEmpregado () {
		data_demissao = Calendar.getInstance();
	}
	protected void gerarMatricula () {
		this.matricula = "Matrícula não definida.";
	}
	protected String recuperarMatricula () {
		return this.matricula;
	}
}


Código 10: Classe "Aluno".
  
public class Aluno extends Pessoa {
	//Atributos    
	private String matricula;
		
	//Métodos
	public Aluno ( String nome , Calendar data_nascimento , long CPF , Endereco endereco ) {
		super ( nome , data_nascimento , CPF , endereco );
	}
}


Código 11: Classe Principal (código parcial).

public class Principal {
	//Atributos
	private static Aluno aluno;
	private static Endereco endereco;
	
	//Método main
	public static void main (String args[]) {
		int idade;
		Calendar data = Calendar.getInstance();
		data.set(1980, 10, 23);
		endereco = new Endereco ();
		endereco.definirPais("Brasil");
		endereco.definirUF("RJ");
		endereco.definirCidade ("Rio de Janeiro");
		endereco.definirRua("Avenida Rio Branco");
		endereco.definirNumero("156A");
		endereco.definirCEP(20040901);
		endereco.definirComplemento("Bloco 03 - Ap 20.005");
		aluno = new Aluno ("Marco Antônio", data , 901564098 , endereco);
		aluno.atualizarIdade();
		idade = aluno.recuperarIdade();

	}
}

O código 12 mostra a classe “Diretor”, que é subclasse de “Empregado”, e o código 13 mostra a classe “Principal” modificada.

Código 12: Classe "Diretor".

public class Diretor extends Empregado {
	//Atributos
	
	//Métodos
	public Diretor(String nome, Calendar data_nascimento, long CPF, Endereco endereco) {
		super(nome, data_nascimento, CPF, endereco);
	}
	protected void gerarMatricula () {
		matricula = "E-" + UUID.randomUUID( ).toString( );
	}
}

Código 13: Classe "Principal" alterada.
  
public class Principal {
	//Atributos
	private static Empregado empregado , diretor;
		
	//Método main
	public static void main (String args[]) {
	
		Calendar data = Calendar.getInstance();
		data.set(1980, 10, 23);
		empregado = new Empregado ("Clara Silva", data , 211456937 , null);
		empregado.gerarMatricula();
		diretor = new Diretor ("Marco Antônio", data , 901564098 , null);
		diretor.gerarMatricula();
		System.out.println ("A matrícula do Diretor é: " + diretor.recuperarMatricula());
		System.out.println ("A matrícula do Empregado é: " + empregado.recuperarMatricula());
	}
}
A execução desse código produz como saída:

A matrícula do Diretor é: E-096d9a3d-98e9-4af1-af61-a03d97525429

A matrícula do Empregado é: Matrícula não definida.


Código 14: Polimorfismo por sobrecarga de método.

public class Diretor extends Empregado {
	//Atributos
	
	//Métodos
	public Diretor(String nome, Calendar data_nascimento, long CPF, Endereco endereco) {
		super(nome, data_nascimento, CPF, endereco);
	}
	protected void gerarMatricula () {
		matricula = "E-" + UUID.randomUUID( ).toString( );
	}
	protected void alterarMatricula () {
		gerarMatricula ();
	}
	protected void alterarMatricula ( String matricula ) {
		this.matricula = matricula;
	}
}
//Nesse caso, uma chamada do tipo “alterarMatricula ()” invocará o método mostrado na linha 8 do Código 14. Caso seja feita uma chamada como “alterarMatricula (“M-202100-1000)”, o método chamado será o da linha 14, pois o parâmetro é uma “String”.
  

Código 15: Classe "Aluno" modificada.

public class Aluno {
	//Atributos    
	private String matricula , nome , naturalidade;
		
	//Métodos
	public Aluno ( String nome , String naturalidade ) {
			this.nome = nome;
			this.naturalidade = naturalidade;
	}
		@Override
		public String toString () {
			return String.format("%s(%s)", nome , naturalidade );
		}
	} 


Código 16: Classe "Escola" – agrupamento de objetos pelo programador.

class Escola {
	//Atributos
	private String nome, CNPJ;   
	private Endereco endereco;
	private List departamentos;
	private List discentes; //criada uma lista de objetos do tipo Aluno
	
	//Métodos
	public Escola ( String nome , String CNPJ) {
		this.nome = nome;
		this.CNPJ = CNPJ;
		this.departamentos = new ArrayList<Departamento> ( );
		this.discentes = new ArrayList<Aluno> ( );
	}
	public void criarDepartamento ( String nomeDepartamento ) {
		departamentos.add ( new Departamento ( nomeDepartamento ) );
	}
	public void fecharDepartamento ( Departamento departamento ) {
		departamentos.remove ( departamento );
	}
	public void matricularAluno ( Aluno novoAluno ) {
		discentes.add ( novoAluno );
	}
	public void trancarMatriculaAluno ( Aluno aluno ) {
		discentes.remove ( aluno );
	}
	public void agruparAlunos ( ) {    				  //O método de agrupamento
		Map < String , List < Aluno > > agrupamento = new HashMap <> (); // declaração de uma estrutura do tipo “Map” e a instanciação da classe pelo objeto “agrupamentoPorNaturalidade”. Podemos observar que será mapeado um objeto do tipo “String” a uma lista de objetos do tipo “Aluno” (“Map < String , List < Aluno > >“).
		for ( Aluno a : discentes ) {  				//o laço implementa a varredura sobre toda a lista. A cada iteração, o valor da variável “naturalidade” é recuperado, e a função “containsKey” verifica se a chave já existe no mapa. Se não existir, ela é inserida.
			if(!agrupamento.containsKey ( a.recuperarNaturalidade ( ) )) {   //adiciona o objeto à lista correspondente à chave existente no mapa.
				agrupamento.put( a.recuperarNaturalidade ( ) , new ArrayList<>( ) ); // método “put” é utilizado para inserir um elemento no mapeamento. A
			}
		agrupamento.get(a.recuperarNaturalidade ( ) ).add(a);  //método “get” é usado para recuperar a referência do objeto mapeado pela chave passada com parâmetro em “get”.
		}
	System.out.println ("Resultado do agrupamento por naturalidade: " + agrupamento );
	}
}

Código 17: Classe Principal.

public class Principal {
	//Atributos
	private static Aluno aluno1 , aluno2 , aluno3 , aluno4 , aluno5 , aluno6 , aluno7 , aluno8 , aluno9;
	private static Escola escola;
	
	//Método main
	public static void main (String args[]) {
		escola = new Escola ( "Escola Pedro Álvares Cabral" , "42.336.174/0006-13");
		criarAlunos ();
	matricularAlunos ();
	escola.agruparAlunos();
}
	
	//Métodos
	private static void criarAlunos ( ) {
		aluno1 = new Aluno ( "Marco Antônio" , "Rio de Janeiro" );
		aluno2 = new Aluno ( "Clara Silva" , "Rio de Janeiro" );
		aluno3 = new Aluno ( "Marcos Cintra" , "Sorocaba" );
		aluno4 = new Aluno ( "Ana Beatriz" , "Barra do Pirai" );
		aluno5 = new Aluno ( "Marcio Gomes" , "São Paulo" );
		aluno6 = new Aluno ( "João Carlos" , "Sorocaba" );
		aluno7 = new Aluno ( "César Augusto" ,  "São Paulo" );
		aluno8 = new Aluno ( "Alejandra Gomez" , "Madri" );
		aluno9 = new Aluno ( "Castelo Branco" , "São Paulo" );
	}
	private static void matricularAlunos ( ) {
		escola.matricularAluno(aluno1);
		escola.matricularAluno(aluno2);
		escola.matricularAluno(aluno3);
		escola.matricularAluno(aluno4);
		escola.matricularAluno(aluno5);
		escola.matricularAluno(aluno6);
		escola.matricularAluno(aluno7);
		escola.matricularAluno(aluno8);
		escola.matricularAluno(aluno9);
	}
}


saída:

Resultado do agrupamento por naturalidade: {

São Paulo=[Marcio Gomes(São Paulo), César Augusto(São Paulo), Castelo Branco(São Paulo)],

Rio de Janeiro=[Marco Antônio(Rio de Janeiro), Clara Silva(Rio de Janeiro)],

Madri=[Alejandra Gomez(Madri)],

Sorocaba=[Marcos Cintra(Sorocaba), João Carlos(Sorocaba)],

Barra do Pirai=[Ana Beatriz(Barra do Pirai)]

}


Agrupamento pelo método “groupingBy”:
Esse método possui três variantes sobrecarregadas, cujas assinaturas exibimos a :

static <T, K> Collector<T,?,Map>> groupingBy(Function<? super T,? extends K> classifier)
static <T, K, D, A, M extends Map<K, D>> Collector<T,?,M> groupingBy(Function<? super T,? extends K> classifier, Supplier<M> mapFactory, Collector<? super T,A,D> downstream)
static <T, K, A, D> Collector<T,?,Map>  groupingBy(Function<? super T,? extends K> classifier, Collector<? super T,A,D> downstream)
//A cláusula “static <T, K> Collector<T,?,Map<K,List<T>>>” é o método (“Collector”) que retorna uma estrutura “Map”, formada pelos pares “K” e uma lista de objetos “T”. “K” é a chave de agrupamento e “T”, obviamente, um objeto agrupado. Então a função cuja referência é passada para o método “groupingBy” é capaz de mapear o objeto na chave de agrupamento.


Código 18: Agrupamento com o uso do método "groupingBy" (assinatura 1).

class Escola {
	//Atributos
	private String nome, CNPJ;   
	private Endereco endereco;
	private List departamentos;
	private List discentes;
	
	//Métodos
	public Escola ( String nome , String CNPJ) {
		this.nome = nome;
		this.CNPJ = CNPJ;
		this.departamentos = new ArrayList ( );
		this.discentes = new ArrayList<> ( );
	}
	public void criarDepartamento ( String nomeDepartamento ) {
		departamentos.add ( new Departamento ( nomeDepartamento ) );
	}
	public void fecharDepartamento ( Departamento departamento ) {
		departamentos.remove ( departamento );
	}
	public void matricularAluno ( Aluno novoAluno ) {
		discentes.add ( novoAluno );
	}
	public void trancarMatriculaAluno ( Aluno aluno ) {
		discentes.remove ( aluno );
	}
	public void agruparAlunos ( ) {
		Map < String , List < Aluno > > agrupamento = discentes.stream().collect(Collectors.groupingBy(Aluno::recuperarNaturalidade));
		System.out.println ("Resultado do agrupamento por naturalidade: ");
		agrupamento.forEach (( String chave , List < Aluno > lista) -> System.out.println (chave + " = " + lista ));
	}
}

A execução desse código produz a saída a seguir:

Resultado do agrupamento por naturalidade:

São Paulo = [Marcio Gomes(São Paulo), César Augusto(São Paulo), Castelo Branco(São Paulo)]

Rio de Janeiro = [Marco Antônio(Rio de Janeiro), Clara Silva(Rio de Janeiro)]

Madri = [Alejandra Gomez(Madri)]

Sorocaba = [Marcos Cintra(Sorocaba), João Carlos(Sorocaba)]

Barra do Pirai = [Ana Beatriz(Barra do Pirai)]


Código 19: Agrupamento com o uso do método "groupingBy" (assinatura 2).

public void agruparAlunos ( int a ) {
    Map < String , Set < Aluno > > agrupamento = discentes.stream().collect(Collectors.groupingBy(Aluno::recuperarNaturalidade , Collectors.toSet()));
    System.out.println ("Resultado do agrupamento por naturalidade: ");    
    agrupamento.forEach (( String chave , Set < Aluno > conjunto) -> System.out.println (chave + " = " + conjunto ));
}
//Podemos ver que o Código 19 utiliza uma estrutura do tipo “Set”, em vez de “List”, para criar as coleções. Consequentemente, o método “groupingBy” passou a contar com mais um argumento − “Collectors.toSet()” – que retorna um “Collector” que acumula os objetos em uma estrutura “Set”. A saída é a mesma mostrada para a execução do código 18.


O Código 20 mostra uma sobrecarga do método “agruparAlunos”, que usa a terceira assinatura de “groupingBy”.
Código 20: Agrupamento com o uso do método "groupingBy" (assinatura 3).

public void agruparAlunos ( double a ) {
	Map < String , Set < Aluno > > agrupamento = discentes.stream().collect(Collectors.groupingBy(Aluno::recuperarNaturalidade , TreeMap::new , Collectors.toSet()));
	System.out.println ("Resultado do agrupamento por naturalidade: ");    
	agrupamento.forEach (( String chave , Set < Aluno > conjunto) -> System.out.println (chave + " = " + conjunto ));
}
//A diferença sintática para a segunda assinatura é apenas a existência de um terceiro parâmetro no método “groupingBy”: “TreeMap::new”. Esse parâmetro vai instruir o uso do mecanismo “TreeMap” na instanciação de “Map” (“agrupamento”).

Veja agora a saída desse código:

Resultado do agrupamento por naturalidade:

Barra do Pirai = [Ana Beatriz(Barra do Pirai)]

Madri = [Alejandra Gomez(Madri)]

Rio de Janeiro = [Clara Silva(Rio de Janeiro), Marco Antônio(Rio de Janeiro)]

Sorocaba = [João Carlos(Sorocaba), Marcos Cintra(Sorocaba)]

São Paulo = [Castelo Branco(São Paulo), César Augusto(São Paulo), Marcio Gomes(São Paulo)]


Cada coleção encapsulada possui um mecanismo de funcionamento, apresentado brevemente a seguir:

Set - Trata-se de uma abstração matemática de conjuntos. É usada para representar conjuntos e não admite elementos duplicados.
List - Implementa o conceito de listas e admite duplicidade de elementos. É uma coleção ordenada e permite o acesso direto ao elemento armazenado, assim como a definição da posição onde armazená-lo. O conceito de Vetor fornece uma boa noção de como essa coleção funciona.
Queue - Embora o nome remeta ao conceito de filas, trata-se de uma coleção que implementa algo mais genérico. Uma “Queue”” pode ser usada para criar uma fila (FIFO), mas também pode implementar uma lista de prioridades, na qual os elementos são ordenados e consumidos segundo a prioridade e não na ordem de chegada. Essa coleção admite a criação de outros tipos de filas com outras regras de ordenação.
Deque - Implementa a estrutura de dados conhecida como Deque (Double Ended Queue). Pode ser usada como uma fila (FIFO) ou uma pilha (LIFO). Admite a inserção e a retirada em ambas as extremidades.



Estrutura de desvio − if.
public class Base {
	private int temp = 1;
	
	public void desvio (){    
		if ( temp )
				System.out.println("Verdade");
		else
				System.out.println("Falsidade");
	}
}
A sintaxe do comando “if” é a seguinte:
if ( < expressão> )
	bloco;
[else
	bloco;]


"if" aninhado.

class Base {
		public static void main(String args[]) {
			int mes = 4; 
			String trimestre;
			if ( mes == 1 || mes == 2 || mes == 3 )
					trimestre = "Primeiro";
			else if ( mes == 4 || mes == 5 || mes == 6 )
					trimestre = "Segundo";
			else if ( mes == 7 || mes == 8 || mes == 9 )
				trimestre = "Terceiro";
		else if ( mes == 10 || mes == 11 || mes == 12)
				trimestre = "Quarto";
		else
				trimestre = "Erro!";
		System.out.println("Abril está no " + trimestre + " trimestre.");
	}
}

//Embora o aninhamento do comando “if” seja útil, muitos casos podem ser melhor resolvidos pelo comando “switch”. A sintaxe de “switch” é a seguinte:

Código 24: switch
 
switch ( < expressão> ) {
	case < valor 1>:
		bloco;
		break;
.
.
.
	case :
		bloco;
	break;
	default:
		bloco;
			break;
}
//No caso do comando “switch”, a expressão pode ser, por exemplo, uma “String”, “byte”, “int”, “char” ou “short”

Estrutura de desvio − "switch".
 
public class Base {
	private String linguagem = “JAVA”;
		
	public void desvio (){    
		switch ( linguagem ) {
			case ( "C" ):
					System.out.println("Suporta apenas programação estruturada");
					break;
			case ( "C++" ):
					System.out.println("Suporta programação estruturada e orientada a objeto");
					break;
			case ( "JAVA "):
					System.out.println("Suporta apenas programação orientada a objeto");
					break;
			default:
					System.out.println("Erro!");
					break;
		}
	}
}

//Outro grupo de comandos importante são as estruturas de repetição. As três estruturas providas pela Java são “while”, “do-while” e o laço “for”.
A estrutura “while” tem a seguinte sintaxe:
Código 26
  
while ( < expressão> ){
	bloco;
}

Código 27 Estrutura de repetição − "while".

class Base {
    public static void main (String args []) {
        private int controle = 0;
        while ( controle < 10 ) {
        System.out.println(controle);
        controle++;
        }
    }
}

//A estrutura “do-while” tem funcionamento parecido. Todavia, ao contrário de “while”, nessa estrutura o bloco sempre será executado ao menos uma vez. Veja sua sintaxe:
Código 28 do while

do {
	bloco;
} while ( < expressão> );

//Como vemos pela sintaxe, o primeiro “bloco” é executado e, somente após, a expressão é avaliada. Se for verdadeira, a repetição continua até que a expressão seja falsa. Caso contrário, a execução do programa continua na linha seguinte.
Vejamos, no Código 29, o código 27 modificado para o uso de “do-while”.

Código 29: Estruturas de repetição − "do-while".

class Base {
	public static void main (String args []) {
		private int controle = 0;
		do {
			System.out.println(controle);
			controle++;
		}while ( controle < 10 );
	}
}

A última estrutura de repetição que veremos é o laço “for”. A sua sintaxe é:

Código 30:

for ( inicialização ; expressão ; iteração ) {
	bloco;
}

Código 31: Estruturas de repetição − "for".

class Base {
	public static void main (String args []) {
		for ( int controle = 0 ; controle < 10 ; controle++ ) {
			System.out.println(controle);
			controle++;
		}
	}
}

//observamos que quando o “bloco” for formado por apenas uma instrução, o uso das chaves ( “{ }” ) é opcional.

Thread em Java
Uma thread é uma maneira de implementar múltiplos caminhos de execução em uma aplicação.

Em Java, há dois tipos de threads:

Daemon - As daemon threads são threads de baixa prioridade, sempre executadas em segundo plano. Essas threads provêm serviços para as threads de usuário (user threads), e sua existência depende delas, pois se todas as threads de usuário finalizarem, a MVJ forçará o encerramento da daemon thread, mesmo que suas tarefas não tenham sido concluídas. O Garbage Collector (GC) é um exemplo de daemon thread. Isso esclarece por que não temos controle sobre quando o GC será executado e nem se o método “finalize” será realizado.
User - Threads de usuário são criadas pela aplicação e finalizadas por ela. A MVJ não força sua finalização e aguardará que as threads completem suas tarefas. Esse tipo de thread executa em primeiro plano e possui prioridades mais altas que as daemon threads. Isso não permite ao usuário ter certeza de quando sua thread entrará em execução, por isso mecanismos adicionais precisam ser usados para garantir a sincronicidade entre as threads. Veremos esses mecanismos mais à frente.

6 estados de uma thread são:
NEW - A thread está nesse estado quando é criada e ainda não está agendada para execução
RUNNABLE - A thread entra nesse estado quando sua execução é agendada (escalonamento) ou quando entra no contexto de execução, isto é, passa a ser processada pela CPU
BLOCKED - A thread passa para este estado quando sua execução é suspensa enquanto aguarda uma trava (lock). A thread sai desse estado quando obtém a trava
TIMED_WAITING - A thread entra nesse estado se for suspensa por um período, por exemplo, pela chamada do método “sleep ()” (dormindo), ou quando o timeout de “wait ()” (esperando) ou “join ()” (juntando) ocorre. A thread sai desse estado quando o período de suspensão é transcorrido
WAITING - A chamada aos métodos “wait ()” ou “join ()” sem timeout ou “park ()” (estacionado) leva a thread ao estado de “WAITING”.
TERMINATED - O último estado ocorre quando a thread encerra sua execução

Código 1: definindo thread por extensão da classe “Threads”.

  
class ThreadSubclasse extends Thread {
	long numero;
	ThreadSubclasse  (long numero) {
	  this.numero = numero;
	}

	public void run() {
// Implementa o comportamento apropriado
	}
} 

Código 2: definindo threads por implementação de Runnable.

  
class ThreadInterface implements Runnable {
	long numero;
	ThreadInterface  (long numero) {
	  this.numero = numero;
	}

	public void run() {
// Implementa o comportamento apropriado
	}
} 

Código 3: criando threads.

  
…
// Extensão de Thread
ThreadSubclasse novaT = new ThreadSubclasse (200);
novaT.start ();
// Implementação de Runnable
ThreadInterface novaT = new ThreadInterface (200);
new Thread ( novaT ).start ();
…

Semáforo / Semaphore classes :
Acquire () - Solicita acesso a um recurso ou uma região crítica, realizando o bloqueio até que uma permissão de acesso esteja disponível ou a thread seja interrompida.
Release () - Método responsável pela liberação do recurso pela thread.

exemplo de criação de semáforo em Java.

  
public class Exemplo
{
  // (...)
  Semaphore sem = new Semaphore ( 50 , true ); //Define até 50 acessos e o uso de FIFO
  sem.acquire ( ); //Solicita 1 acesso
  ... // Região crítica
  sem.release ( ); //Libera o acesso obtido
  ... //Código não crítico
  sem.acquire ( 4 ); //Solicita 4 acessos
  ... // Região crítica
  sem.release ( 4 ); //Libera os 4 acessos obtidos
  ... //Código não crítico
}
//Caso o semáforo seja criado com o parâmetro “fair” falso, ele não utilizará uma FIFO.

Semáforo - Não verifica se a liberação de acesso veio da mesma thread que a solicitou.
Mutex - Faz a verificação para garantir que a liberação veio da thread que a solicitou.


Thread Mãe (classe PingPong)

public class PingPong {
	//Atributos
	private Semaphore s1 , s2;
	private Ping ping;
	private Pong pong;
	private Controle contador;
	private int tamanho_partida;
  
	//Métodos
	public PingPong ( int tamanho_partida ) throws InterruptedException {
	  s1 = new Semaphore(0);
	  s2 = new Semaphore(0);
	  contador = new Controle ( tamanho_partida );
	  ping = new Ping ( s1 , s2 , contador );
	  pong = new Pong ( s1 , s2 , contador );
	  //juiz = new Juiz ( tamanho_partida / 2 );
	  new Thread ( ping ).start ();
	  new Thread ( pong ).start ();
	  s1.release();
	}   
  }


Thread A (classe Ping)

  public class Ping implements Runnable {
	//Atributos
	private Semaphore s1 , s2;
	private Controle contador;
  
	//Métodos
	public Ping ( Semaphore s1 ,  Semaphore s2 , Controle contador )
	{
	  this.s1 = s1;
	  this.s2 = s2;
	  this.contador = contador;
	}
  
	@Override
	public void run() {
	  try {
			System.out.println("Thread A (PING) iniciada");
			   while ( contador.getControle() > 0) {
			  s1.acquire();
			  System.out.println( "PING => 0" );
			  s2.release();
			  contador.decrementa();
			}
		  } catch ( InterruptedException e ) {
			 e.printStackTrace();
		  }
	  System.out.println("Thread A (PING) terminada");
	}
  }


Thread B (classe Pong).
  
public class Pong implements Runnable {
  //Atributos
  private Semaphore s1 , s2;
  private Controle contador;

  //Métodos
  public Pong ( Semaphore s1 ,  Semaphore s2 , Controle contador)
  {
	this.s1 = s1;
	this.s2 = s2;
	this.contador = contador;
  }

  @Override
  public void run() {
	try {
		  System.out.println("Thread B (PONG) iniciada");
		  while ( contador.getControle() > 0) {
			s2.acquire();
			System.out.println( "0 <= PONG" );
			s1.release();
			contador.decrementa();
		  }
		} catch ( InterruptedException e ) {
		   e.printStackTrace();
		}
	System.out.println("Thread B (PONG) terminada");
  }
}


Segue-se uma troca de sinalizações entre as threads até o número máximo definido pela linha 7 do código da Classe principal,
public class Principal {
	//Atributos
	private static PingPong partida;
  
	//Métodos
	public static void main (String args[]) throws InterruptedException {
	  partida = new PingPong ( 8 );
	}    
  }



Podemos observar duas execuções sucessivas de aplicação:
  
Thread A (PING) iniciada
Thread B (PONG) iniciada
PING => 0
0 <= PONG
PING => 0
0 <= PONG
PING => 0
0 <= PONG
PING => 0
0 <= PONG
Thread B (PONG) terminada
PING => 0
Thread A (PING) terminada

Thread A (PING) iniciada
PING => 0
Thread B (PONG) iniciada
0 <= PONG
PING => 0
0 <= PONG
PING => 0
0 <= PONG
PING => 0
0 <= PONG
Thread B (PONG) terminada
PING => 0
Thread A (PING) terminada